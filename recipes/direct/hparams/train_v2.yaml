# ############################################################################
# Model: Direct SLU
# Encoder: Pre-trained ASR encoder -> LSTM
# Decoder: GRU + beamsearch
# Tokens: BPE with unigram
# losses: NLL
# Training: SLURP
# Authors:  Loren Lugosch, Mirco Ravanelli 2020
# Edit:
#   V1: ...
#   V2:
#     - batch_size from 16 to 12
#     - dec.rnn_type: gru to lstm
#     - dec.attn_type: keyvalue to content
#     - dec.dropout from 0.0 to 0.1
#     - try add checkpointer.recoverables.train_logger !!!ERROR DEPRECATED
#     - slu_enc.lstm: !new:speechbrain.nnet.RNN.QuasiRNN  # from LSTM
# ############################################################################

# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]
# ADD: prepared folder from prev step
prepared_folder: results/prepared
output_folder: !ref results/better_tokenizer/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
log_folder: !ref <output_folder>/log

# Data files
# The SLURP dataset will be automatically downloaded in the specified data_folder
# data_folder: !PLACEHOLDER # e.g, /localscratch/SLURP
data_folder: /slurp/audio
data_folder_rirs: !ref <data_folder>
train_splits: ["train_synthetic", "train_real"]
tokenizer_file: https://www.dropbox.com/s/tmwq12r5vgcsif9/58_unigram.model?dl=1
skip_prep: False
# original csv
o_csv_train: !ref <prepared_folder>/train-type=direct.csv
o_csv_valid: !ref <prepared_folder>/devel-type=direct.csv
o_csv_test: !ref <prepared_folder>/test-type=direct.csv

# Data sampling strategy
sampling:
  files:
    - !ref <o_csv_train>
    - !ref <o_csv_valid>
    - !ref <o_csv_test>
  strategies:
    stratified_sampling:
      selection_rate: 0.2
      by: intent

# Load csv
csv_train: !ref <prepared_folder>/train-type=direct-sample=0.2.csv
csv_valid: !ref <prepared_folder>/devel-type=direct-sample=0.2.csv
csv_test: !ref <prepared_folder>/test-type=direct.csv

# Training parameters
number_of_epochs: 20
batch_size: 12  # DEFAULT 16
lr: 0.0003
# token_type: unigram # ["unigram", "bpe", "char"]
sorting: random
ckpt_interval_minutes: 15 # save checkpoint every N min

# Model parameters
sample_rate: 16000
emb_size: 128
dec_neurons: 512
output_neurons: 58 # index(eos/bos) = 0
ASR_encoder_dim: 512
encoder_dim: 256

# Decoding parameters
bos_index: 0
eos_index: 0
min_decode_ratio: 0.0
max_decode_ratio: 10.0
slu_beam_size: 80
eos_threshold: 1.5
temperature: 1.25

dataloader_opts:
  batch_size: !ref <batch_size>
  shuffle: True

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
  limit: !ref <number_of_epochs>

# Models
asr_model: !apply:speechbrain.pretrained.EncoderDecoderASR.from_hparams
  source: speechbrain/asr-crdnn-rnnlm-librispeech
  run_opts: {"device":"cuda:0"}

slu_enc: !new:speechbrain.nnet.containers.Sequential
  input_shape: [null, null, !ref <ASR_encoder_dim>]
  lstm: !new:speechbrain.nnet.RNN.SLiGRU  # DEFAULT LSTM
    input_size: !ref <ASR_encoder_dim>
    bidirectional: True
    hidden_size: !ref <encoder_dim>
    num_layers: 2
  linear: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <encoder_dim> * 2
    n_neurons: !ref <encoder_dim>

output_emb: !new:speechbrain.nnet.embedding.Embedding
  num_embeddings: !ref <output_neurons>
  embedding_dim: !ref <emb_size>

dec: !new:speechbrain.nnet.RNN.AttentionalRNNDecoder
  enc_dim: !ref <encoder_dim>
  input_size: !ref <emb_size>
  rnn_type: lstm        # gru
  attn_type: content    # keyvalue
  hidden_size: !ref <dec_neurons>
  attn_dim: 512
  num_layers: 3
  scaling: 1.0
  dropout: 0.0         # DEFAULT 0.0


seq_lin: !new:speechbrain.nnet.linear.Linear
  input_size: !ref <dec_neurons>
  n_neurons: !ref <output_neurons>

env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
  openrir_folder: !ref <data_folder_rirs>
  babble_prob: 0.0
  reverb_prob: 0.0
  noise_prob: 1.0
  noise_snr_low: 0
  noise_snr_high: 15

modules:
  slu_enc: !ref <slu_enc>
  output_emb: !ref <output_emb>
  dec: !ref <dec>
  seq_lin: !ref <seq_lin>
  env_corrupt: !ref <env_corrupt>

model: !new:torch.nn.ModuleList
  - [!ref <slu_enc>, !ref <output_emb>,
     !ref <dec>, !ref <seq_lin>]

tokenizer: !new:sentencepiece.SentencePieceProcessor

pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
  collect_in: !ref <save_folder>/SLURM_tokenizer
  loadables:
    tokenizer: !ref <tokenizer>
  paths:
    tokenizer: !ref <tokenizer_file>

beam_searcher: !new:speechbrain.decoders.S2SRNNBeamSearcher
  embedding: !ref <output_emb>
  decoder: !ref <dec>
  linear: !ref <seq_lin>
  bos_index: !ref <bos_index>
  eos_index: !ref <eos_index>
  min_decode_ratio: !ref <min_decode_ratio>
  max_decode_ratio: !ref <max_decode_ratio>
  beam_size: !ref <slu_beam_size>
  eos_threshold: !ref <eos_threshold>
  temperature: !ref <temperature>
  using_max_attn_shift: False
  max_attn_shift: 30
  coverage_penalty: 0.

opt_class: !name:torch.optim.Adam
  lr: !ref <lr>

lr_annealing: !new:speechbrain.nnet.schedulers.NewBobScheduler
  initial_value: !ref <lr>
  improvement_threshold: 0.0025
  annealing_factor: 0.8
  patient: 0

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
  checkpoints_dir: !ref <save_folder>
  recoverables:
    model: !ref <model>
    scheduler: !ref <lr_annealing>
    counter: !ref <epoch_counter>
    # Error: Don't know how to save <class 'speechbrain.utils.train_logger.TensorboardLogger'>.
    #        Register default hook or add custom hook for this object.
    # train_logger: !ref <train_logger> # v2

augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
  sample_rate: !ref <sample_rate>
  speeds: [95, 100, 105]

log_softmax: !new:speechbrain.nnet.activations.Softmax
  apply_log: True

seq_cost: !name:speechbrain.nnet.losses.nll_loss
  label_smoothing: 0.1

# DEFAULT: train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
#    save_file: !ref <train_log>
# Use TensorboardLogger instead of FileTrainLogger
train_logger: !new:speechbrain.utils.train_logger.TensorboardLogger
  save_dir: !ref <log_folder>

error_rate_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats

cer_computer: !name:speechbrain.utils.metric_stats.ErrorRateStats
  split_tokens: True
